---
# tasks file for sip-proxy

# Install Dependencies
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
    - kamailio
    - rtpproxy

- name: Install dependencies (RedHat).
  include: prep-RedHat.yml
  when: ansible_os_family == 'RedHat'
  tags:
    - kamailio
    - rtpproxy
    - database

- name: Install dependencies (Debian).
  include: prep-Debian.yml
  when: ansible_os_family == 'Debian'
  tags:
    - kamailio
    - rtpproxy
    - database

# - name: Install pip3.
#   become: yes
#   apt:
#     name: python3-pip
#     state: present
#   when: ansible_os_family == "Debian"

# - name: Install psycopg2 for ansible to be able to create postgresql.
#   become: yes
#   pip:
#     name: psycopg2-binary
#   when: ansible_os_family == "Debian"

# Check for previously installed Kamailio and Rtpproxy
- name: Check for existing Kamailio binary.
  stat:
    path: "{{ kamailio_bin }}"
  register: _kamailio_install
  tags: kamailio

- name: Check Kamailio version.
  command: "{{ kamailio_bin }} --version"
  register: _kamailio_version
  when: "_kamailio_install.stat.exists"
  changed_when: False
  failed_when: False
  tags: kamailio


- name: Check for existing Rtpproxy binary.
  stat:
    path: "{{ rtpproxy_bin }}"
  register: _rtpproxy_install
  tags: rtpproxy

# Install Kamailio and Rtpproxy
- name: Install Kamailio.
  include: install_kamailio.yml
  when: "not _kamailio_install.stat.exists or kamailio_version is not defined or kamailio_version|string not in _kamailio_version.stdout"
  tags:
    - kamailio

- name: Install Rtpproxy.
  include: install_rtpproxy.yml
  when: "not _rtpproxy_install.stat.exists"
  tags:
    - rtpproxy

# Generate Configuration files
- name: Configure Kamailio.
  include: configure_kamailio.yml
  tags:
    - kamailio

- name: Configure Rtpproxy.
  include: configure_rtpproxy.yml
  tags:
    - rtpproxy

# # Still need to make idempotent
# - name: Add Recorders as dispatcher destinations.
#   command: |
#     psql -c "INSERT INTO dispatcher
#     VALUES ('{{ index }}', '{{ disp_set }}', 'sip:{{ item.ip }}:{{ item.port }};transport={{ item.protocol }}', '{{ item.flags }}', '{{ item.priority }}', '{{ item.attrs }}', '{{ item.name }}')
#     ON CONFLICT (id)
#     DO UPDATE SET
#     id={{ index }}, setid={{ disp_set }}, destination='sip:{{ item.ip }}:{{ item.port }};transport={{ item.protocol }}', flags='{{ item.flags }}', priority='{{ item.priority }}', attrs='{{ item.attrs }}', description='{{ item.name }}';"
#   run_once: true
#   loop: "{{ dispatcher_destinations }}"
#   loop_control:
#     index_var: index
#   environment:
#     PGHOST: "{{ dbhost }}"
#     PGPORT: "{{ dbport }}"
#     PGUSER: "{{ dbuser_kam }}"
#     PGPASSWORD: "{{ dbpass_kam }}"
#     PGDATABASE: "{{ db_kam }}"

- name: Create Dispatcher SQL script.
  template:
    src: dispatcher-list.sql.j2
    dest: "/usr/local/etc/kamailio/dispatcher.list.sql"
    owner: root
    group: root
    mode: 0644
